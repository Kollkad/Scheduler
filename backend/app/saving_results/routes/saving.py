# backend/app/saving_results/routes/saving.py
"""
–ú–æ–¥—É–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤ FastAPI –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª—ã.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤:
- –û—á–∏—â–µ–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤
- –¶–≤–µ—Ç–æ–≤—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é (—Ä–∞–¥—É–≥—É)
- –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
- –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
"""

from fastapi import APIRouter, HTTPException
from fastapi.responses import FileResponse
import pandas as pd
import tempfile

from backend.app.common.modules.data_manager import data_manager
from backend.app.saving_results.modules.saving_results_settings import (
    generate_filename,
    save_with_xlsxwriter_formatting
)

router = APIRouter(prefix="/api/save", tags=["saving"])


@router.get("/detailed-report")
async def save_detailed_report():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

    Returns:
        FileResponse: Excel —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        detailed_data = data_manager.get_detailed_data()

        if detailed_data is None or detailed_data.empty:
            raise HTTPException(status_code=400, detail="–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {len(detailed_data)} —Å—Ç—Ä–æ–∫, {len(detailed_data.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
            filepath = tmp_file.name

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ xlsxwriter
        save_with_xlsxwriter_formatting(detailed_data, filepath, '–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')

        download_filename = generate_filename("detailed_report")

        return FileResponse(
            path=filepath,
            filename=download_filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/documents-report")
async def save_documents_report():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

    Returns:
        FileResponse: Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        documents_data = data_manager.get_documents_data()

        if documents_data is None or documents_data.empty:
            raise HTTPException(status_code=400, detail="–û—Ç—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents_data)} —Å—Ç—Ä–æ–∫, {len(documents_data.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
            filepath = tmp_file.name

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ xlsxwriter
        save_with_xlsxwriter_formatting(documents_data, filepath, '–î–æ–∫—É–º–µ–Ω—Ç—ã')

        download_filename = generate_filename("documents_report")

        return FileResponse(
            path=filepath,
            filename=download_filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/available-data")
async def get_available_data_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.

    Returns:
        dict: –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    """
    try:
        detailed_data = data_manager.get_detailed_data()
        documents_data = data_manager.get_documents_data()

        status = {
            "detailed_report": {
                "loaded": detailed_data is not None,
                "row_count": len(detailed_data) if detailed_data is not None else 0,
            },
            "documents_report": {
                "loaded": documents_data is not None,
                "row_count": len(documents_data) if documents_data is not None else 0,
            }
        }

        return {
            "success": True,
            "status": status,
            "message": "–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω"
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


@router.get("/lawsuit-production")
async def save_lawsuit_production():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

    Returns:
        FileResponse: Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        lawsuit_data = data_manager.get_processed_data("lawsuit_staged")

        if lawsuit_data is None or lawsuit_data.empty:
            raise HTTPException(status_code=400, detail="–î–∞–Ω–Ω—ã–µ –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {len(lawsuit_data)} —Å—Ç—Ä–æ–∫, {len(lawsuit_data.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
            filepath = tmp_file.name

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ xlsxwriter
        save_with_xlsxwriter_formatting(lawsuit_data, filepath, '–ò—Å–∫–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'production')

        download_filename = generate_filename("lawsuit_production")

        return FileResponse(
            path=filepath,
            filename=download_filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/order-production")
async def save_order_production():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

    Returns:
        FileResponse: Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        order_data = data_manager.get_processed_data("order_staged")

        if order_data is None or order_data.empty:
            raise HTTPException(status_code=400, detail="–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–∫–∞–∑–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {len(order_data)} —Å—Ç—Ä–æ–∫, {len(order_data.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
            filepath = tmp_file.name

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ xlsxwriter
        save_with_xlsxwriter_formatting(order_data, filepath, '–ü—Ä–∏–∫–∞–∑–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'production')

        download_filename = generate_filename("order_production")

        return FileResponse(
            path=filepath,
            filename=download_filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/documents-analysis")
async def save_documents_analysis():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

    Returns:
        FileResponse: Excel —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        documents_data = data_manager.get_processed_data("documents_processed")

        if documents_data is None or documents_data.empty:
            raise HTTPException(status_code=400, detail="–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents_data)} —Å—Ç—Ä–æ–∫, {len(documents_data.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
            filepath = tmp_file.name

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ xlsxwriter
        save_with_xlsxwriter_formatting(documents_data, filepath, '–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')

        download_filename = generate_filename("documents_analysis")

        return FileResponse(
            path=filepath,
            filename=download_filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/tasks")
async def save_tasks():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ —Å—Ä–æ–∫–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ª.

    Returns:
        FileResponse: Excel —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        tasks_data = data_manager.get_processed_data("tasks")

        if tasks_data is None or tasks_data.empty:
            raise HTTPException(status_code=400, detail="–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏: {len(tasks_data)} —Å—Ç—Ä–æ–∫, {len(tasks_data.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
            filepath = tmp_file.name

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ xlsxwriter
        # data_type="tasks" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç –º–∞–ø–ø–∏–Ω–≥ –≤ save_with_xlsxwriter_formatting
        save_with_xlsxwriter_formatting(tasks_data, filepath, '–ó–∞–¥–∞—á–∏', 'tasks')

        download_filename = generate_filename("tasks")

        return FileResponse(
            path=filepath,
            filename=download_filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/rainbow-analysis")
async def save_rainbow_analysis():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ä–∞–¥—É–≥–∏).

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∏–ª—å—Ç—Ä—ã, —á—Ç–æ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥—É–≥–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏.

    Returns:
        FileResponse: Excel —Ñ–∞–π–ª —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–µ–ª

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        detailed_data = data_manager.get_detailed_data()

        if detailed_data is None or detailed_data.empty:
            raise HTTPException(status_code=400, detail="–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–π –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ –∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–¥—É–≥–∏
        from backend.app.rainbow.modules.rainbow_classifier import RainbowClassifier

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        colored_data = RainbowClassifier.add_color_column(detailed_data)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ö –∂–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á—Ç–æ –∏ –≤ classify_cases()
        from backend.app.common.config.column_names import COLUMNS, VALUES

        rainbow_data = colored_data[
            (colored_data[COLUMNS["CATEGORY"]] == VALUES["CLAIM_FROM_BANK"]) &
            (~colored_data[COLUMNS["CASE_STATUS"]].isin([
                VALUES["CLOSED"],
                VALUES["ERROR_DUBLICATE"],
                VALUES["WITHDRAWN_BY_THE_INITIATOR"]
            ]))
        ]

        if rainbow_data.empty:
            raise HTTPException(status_code=400, detail="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–¥—É–≥–∏")

        print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∞–¥—É–≥–∏: {len(rainbow_data)} —Å—Ç—Ä–æ–∫")

        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
            filepath = tmp_file.name

        save_with_xlsxwriter_formatting(rainbow_data, filepath, '–¶–≤–µ—Ç–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è')

        download_filename = generate_filename("rainbow_analysis")

        return FileResponse(
            path=filepath,
            filename=download_filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–¥—É–≥–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/all-processed-data")
async def get_all_processed_data_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        dict: –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        detailed_data = data_manager.get_detailed_data()
        documents_data = data_manager.get_documents_data()
        lawsuit_data = data_manager.get_processed_data("lawsuit_staged")
        order_data = data_manager.get_processed_data("order_staged")
        documents_analysis_data = data_manager.get_processed_data("documents_processed")
        tasks_data = data_manager.get_processed_data("tasks")

        status = {
            "detailed_report": {
                "loaded": detailed_data is not None,
                "row_count": len(detailed_data) if detailed_data is not None else 0,
            },
            "documents_report": {
                "loaded": documents_data is not None,
                "row_count": len(documents_data) if documents_data is not None else 0,
            },
            "lawsuit_production": {
                "loaded": lawsuit_data is not None,
                "row_count": len(lawsuit_data) if lawsuit_data is not None else 0,
            },
            "order_production": {
                "loaded": order_data is not None,
                "row_count": len(order_data) if order_data is not None else 0,
            },
            "documents_analysis": {
                "loaded": documents_analysis_data is not None,
                "row_count": len(documents_analysis_data) if documents_analysis_data is not None else 0,
            },
            "tasks": {
                "loaded": tasks_data is not None,
                "row_count": len(tasks_data) if tasks_data is not None else 0,
            }
        }

        return {
            "success": True,
            "status": status,
            "message": "–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω"
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


@router.get("/all-analysis")
async def save_all_analysis():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ–¥–∏–Ω ZIP-–∞—Ä—Ö–∏–≤.

    –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑—ã.

    Returns:
        FileResponse: ZIP –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
    """
    import zipfile
    import os

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è ZIP –∞—Ä—Ö–∏–≤–∞ (–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
        with tempfile.NamedTemporaryFile(suffix=".zip", delete=False) as tmp_zip_file:
            zip_filepath = tmp_zip_file.name

        files_to_zip = []
        temp_files = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

        try:
            # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è
            data_sources = {
                "detailed_report": {
                    "data": data_manager.get_detailed_data(),  # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ú–ï–¢–û–î
                    "sheet_name": "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç",
                    "data_type": None
                },
                "documents_report": {
                    "data": data_manager.get_documents_data(),  # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ú–ï–¢–û–î
                    "sheet_name": "–û—Ç—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                    "data_type": None
                },
                "lawsuit_production": {
                    "data": data_manager.get_processed_data("lawsuit_staged"),
                    "sheet_name": "–ò—Å–∫–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
                    "data_type": "production"
                },
                "order_production": {
                    "data": data_manager.get_processed_data("order_staged"),
                    "sheet_name": "–ü—Ä–∏–∫–∞–∑–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
                    "data_type": "production"
                },
                "documents_analysis": {
                    "data": data_manager.get_processed_data("documents_processed"),
                    "sheet_name": "–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                    "data_type": None
                },
                "tasks": {
                    "data": data_manager.get_processed_data("tasks"),
                    "sheet_name": "–ó–∞–¥–∞—á–∏",
                    "data_type": "tasks"
                }
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for data_key, config in data_sources.items():
                try:
                    data = config["data"]
                    sheet_name = config["sheet_name"]
                    data_type = config["data_type"]

                    if data is not None and not data.empty:
                        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
                            filepath = tmp_file.name
                            temp_files.append(filepath)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏

                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                        save_with_xlsxwriter_formatting(data, filepath, sheet_name, data_type)
                        files_to_zip.append((filepath, f"{data_key}.xlsx"))
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {sheet_name}")

                    else:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {sheet_name} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {config['sheet_name']}: {e}")

            if not files_to_zip:
                raise HTTPException(status_code=400, detail="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

            # –°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞
            with zipfile.ZipFile(zip_filepath, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for file_path, archive_name in files_to_zip:
                    zipf.write(file_path, archive_name)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_filename = generate_filename("all_analysis") + ".zip"

            # –í–æ–∑–≤—Ä–∞—Ç ZIP-–∞—Ä—Ö–∏–≤–∞ –∫–ª–∏–µ–Ω—Ç—É
            return FileResponse(
                path=zip_filepath,
                filename=download_filename,
                media_type='application/zip'
            )

        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
            for file_path in temp_files:
                try:
                    if os.path.exists(file_path):
                        os.unlink(file_path)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {e}")
        # –û—á–∏—Å—Ç–∫–∞ ZIP —Ñ–∞–π–ª–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if os.path.exists(zip_filepath):
                os.unlink(zip_filepath)
        except:
            pass
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {str(e)}")