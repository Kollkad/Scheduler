#backend/app/common/routes/common.py
"""
–ú–æ–¥—É–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤ FastAPI –¥–ª—è –æ–±—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:
- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–Ω–∞–ª–∏–∑–∞ (—Å–±—Ä–æ—Å, —É–¥–∞–ª–µ–Ω–∏–µ)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
"""

from fastapi import APIRouter, File, UploadFile, HTTPException
import tempfile
import shutil
import os
import pandas as pd
from typing import Dict, Optional
from backend.app.table_sorter.routes.filters import router as filters_router
from ..modules.data_manager import data_manager

router = APIRouter(tags=["common"])
router.include_router(filters_router)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
current_files: Dict[str, Optional[str]] = {
    "current_detailed_report": None,
    "documents_report": None,
    "previous_detailed_report": None
}

@router.post("/upload-file")
async def upload_file(file_type: str, file: UploadFile = File(...)):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

    Args:
        file_type (str): –¢–∏–ø —Ñ–∞–π–ª–∞ (current_detailed_report, documents_report, previous_detailed_report)
        file (UploadFile): –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π Excel —Ñ–∞–π–ª

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {
            "message": str,
            "filename": str,
            "file_type": str,
            "filepath": str
        }

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        HTTPException: 500 –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    """
    global current_files

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if not file.filename.endswith(('.xlsx', '.xls')):
        raise HTTPException(status_code=400, detail="–¢–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if file_type not in current_files:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
            shutil.copyfileobj(file.file, tmp_file)
            current_files[file_type] = tmp_file.name

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file.filename} (—Ç–∏–ø: {file_type})")
        print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å: {current_files[file_type]}")

        return {
            "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
            "filename": file.filename,
            "file_type": file_type,
            "filepath": current_files[file_type]
        }
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        file.file.close()


@router.get("/test-data")
async def test_data():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DataFrame.

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ {
            "status": str,
            "all_columns": list,
            "target_columns": dict,
            "shape": tuple,
            "sample_data": dict
        }
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ data_manager
    df = data_manager.get_detailed_data()
    if df is None or not isinstance(df, pd.DataFrame) or df.empty:
        return {"status": "no_data"}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
    all_columns = list(df.columns)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
    from backend.app.common.config.column_names import COLUMNS
    target_columns = {
        "GOSB": COLUMNS["GOSB"],
        "RESPONSIBLE_EXECUTOR": COLUMNS["RESPONSIBLE_EXECUTOR"],
        "COURT": COLUMNS["COURT"],
        "METHOD_OF_PROTECTION": COLUMNS["METHOD_OF_PROTECTION"]
    }

    found_columns = {}
    sample_data = {}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    for eng_name, rus_name in target_columns.items():
        found = rus_name in all_columns
        found_columns[eng_name] = found

        if found:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç–æ–ª–±—Ü–∞
                unique_vals = df[rus_name].fillna('–ù–µ —É–∫–∞–∑–∞–Ω–æ').astype(str).unique()
                sample_data[eng_name] = unique_vals.tolist()[:10]
            except Exception as e:
                sample_data[eng_name] = f"ERROR: {str(e)}"

    return {
        "status": "data_loaded",
        "all_columns": all_columns,
        "target_columns": found_columns,
        "shape": df.shape,
        "sample_data": sample_data
    }


@router.get("/files-status")
async def get_files_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.

    Returns:
        dict: –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {
            file_type: {
                "loaded": bool,
                "filepath": str,
                "exists": bool
            },
            "ready_for_analysis": bool
        }
    """
    status = {}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for file_type, filepath in current_files.items():
        status[file_type] = {
            "loaded": filepath is not None,
            "filepath": filepath,
            "exists": filepath is not None and os.path.exists(filepath)
        }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    mandatory_loaded = all([
        current_files["current_detailed_report"] is not None,
        current_files["documents_report"] is not None
    ])

    status["ready_for_analysis"] = mandatory_loaded

    return status


@router.delete("/remove-file")
async def remove_file(file_type: str):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–º—è—Ç–∏.

    Args:
        file_type (str): –¢–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {
            "message": str,
            "file_type": str,
            "removed": bool
        }

    Raises:
        HTTPException: 400 –µ—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞
    """
    global current_files

    if file_type not in current_files:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_files[file_type] = None

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    print(f"üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_type}")

    return {
        "message": f"–§–∞–π–ª {file_type} —É–¥–∞–ª–µ–Ω",
        "file_type": file_type,
        "removed": True
    }


@router.post("/reset-analysis")
async def reset_analysis():
    """
    –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏ –¥–∞–Ω–Ω—ã—Ö, –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–±—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {
            "success": bool,
            "message": str,
            "cleared_data": list
        }
    """
    global current_files

    try:
        cleared_data = []

        # –û—á–∏—Å—Ç–∫–∞ –í–°–ï–• –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
        data_manager.clear_processed_data("all")
        cleared_data.extend(["lawsuit_staged", "order_staged", "documents_processed", "tasks"])
        print("‚úÖ –û—á–∏—â–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data_manager.clear_data("all")
        cleared_data.extend(["detailed_report", "documents_report", "raw_data", "colored_data"])
        print("‚úÖ –û—á–∏—â–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        import gc
        gc.collect()
        print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞")

        return {
            "success": True,
            "message": "–°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "cleared_data": cleared_data,
            "memory_cleaned": True
        }

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–±—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
        )