"""
backend/app/common/modules/data_manager.py

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ó–∞–≥—Ä—É–∑–∫—É –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤
- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏–º –º–æ–¥—É–ª—è–º —Å–∏—Å—Ç–µ–º—ã
"""

import pandas as pd
from typing import Dict, Optional, Tuple
from datetime import timedelta, datetime
import gc

from backend.app.common.config.calendar_config import russian_calendar
from backend.app.common.modules.data_import import load_excel_data
from backend.app.common.modules.data_clean_detailed import clean_data as clean_detailed
from backend.app.common.modules.data_clean_documents import clean_documents_data as clean_documents
from backend.app.rainbow.modules.rainbow_classifier import RainbowClassifier


class DataManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∏ –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏.

    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—É—Å—Ç—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏."""
        # –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self._cleaned_data: Dict[str, Optional[pd.DataFrame]] = {
            "detailed_report": None,
            "documents_report": None
        }
        # –ò—Å—Ö–æ–¥–Ω—ã–µ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._raw_data: Dict[str, Optional[pd.DataFrame]] = {
            "detailed_report": None,
            "documents_report": None
        }
        # –î–∞–Ω–Ω—ã–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        self._colored_data: Dict[str, Optional[pd.DataFrame]] = {
            "detailed_report": None,
            "documents_report": None
        }
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self._processed_data: Dict[str, Optional[pd.DataFrame]] = {
            "lawsuit_staged": None,  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã build_new_table() –¥–ª—è –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            "order_staged": None,  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            "documents_processed": None,  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            "tasks": None  # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        }

    def load_detailed_report(self, filepath: str) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.

        Args:
            filepath (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

        Returns:
            pd.DataFrame: –û—á–∏—â–µ–Ω–Ω—ã–π DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º —Ü–≤–µ—Ç–∞

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
        """
        if self._cleaned_data["detailed_report"] is not None:
            return self._cleaned_data["detailed_report"]

        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        raw_df = load_excel_data(filepath)
        cleaned_df = clean_detailed(raw_df)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –∑–∞–º–µ–Ω–∞ "–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" –Ω–∞ "–ò—Å–∫–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
        from backend.app.common.config.column_names import COLUMNS, VALUES
        method_col = COLUMNS["METHOD_OF_PROTECTION"]
        simplified_value = VALUES["SIMPLIFIED_PRODUCTION"]
        claim_value = VALUES["CLAIM_PROCEEDINGS"]

        if method_col in cleaned_df.columns:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ replace –≤–º–µ—Å—Ç–æ –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–π –∑–∞–º–µ–Ω—ã
            cleaned_df[method_col] = cleaned_df[method_col].replace(
                simplified_value, claim_value
            )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        colored_df = RainbowClassifier.add_color_column(cleaned_df)

        self._raw_data["detailed_report"] = raw_df
        self._cleaned_data["detailed_report"] = cleaned_df
        self._colored_data["detailed_report"] = colored_df

        return colored_df

    def load_documents_report(self, filepath: str) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –æ—Ç—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

        Args:
            filepath (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

        Returns:
            pd.DataFrame: –û—á–∏—â–µ–Ω–Ω—ã–π DataFrame –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
        """
        if self._cleaned_data["documents_report"] is not None:
            return self._cleaned_data["documents_report"]

        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        raw_df = load_excel_data(filepath)
        cleaned_df = clean_documents(raw_df)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è 1: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—É–¥–∞ –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        from backend.app.common.config.column_names import COLUMNS
        court_alt_name = COLUMNS["COURT_NAME"]
        court_std_name = COLUMNS["COURT"]

        if court_alt_name in cleaned_df.columns and court_std_name not in cleaned_df.columns:
            cleaned_df.rename(columns={court_alt_name: court_std_name}, inplace=True)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è 2: –∑–∞–º–µ–Ω–∞ "–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" –Ω–∞ "–ò—Å–∫–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
        from backend.app.common.config.column_names import VALUES
        method_col = COLUMNS["METHOD_OF_PROTECTION"]
        simplified_value = VALUES["SIMPLIFIED_PRODUCTION"]
        claim_value = VALUES["CLAIM_PROCEEDINGS"]

        if method_col in cleaned_df.columns:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ replace –≤–º–µ—Å—Ç–æ –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–π –∑–∞–º–µ–Ω—ã
            cleaned_df[method_col] = cleaned_df[method_col].replace(
                simplified_value, claim_value
            )

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
        today = datetime.now().date()

        self._raw_data["documents_report"] = raw_df
        self._cleaned_data["documents_report"] = cleaned_df

        return cleaned_df

    def get_detailed_data(self) -> Optional[pd.DataFrame]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.

        Returns:
            Optional[pd.DataFrame]: DataFrame –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ None
        """
        return self._cleaned_data["detailed_report"]

    def get_documents_data(self) -> Optional[pd.DataFrame]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

        Returns:
            Optional[pd.DataFrame]: DataFrame –æ—Ç—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ None
        """
        return self._cleaned_data["documents_report"]

    def get_both_data(self) -> Tuple[Optional[pd.DataFrame], Optional[pd.DataFrame]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–∞ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞.

        Returns:
            Tuple[Optional[pd.DataFrame], Optional[pd.DataFrame]]:
                –ö–æ—Ä—Ç–µ–∂ (–¥–µ—Ç–∞–ª—å–Ω—ã–π_–æ—Ç—á–µ—Ç, –æ—Ç—á–µ—Ç_–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
        """
        return self.get_detailed_data(), self.get_documents_data()

    def is_loaded(self, data_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

        Args:
            data_type (str): –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö - 'detailed', 'documents', 'both'

        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–Ω–∞—á–µ False
        """
        if data_type == "detailed":
            return self._cleaned_data["detailed_report"] is not None
        elif data_type == "documents":
            return self._cleaned_data["documents_report"] is not None
        elif data_type == "both":
            return (self._cleaned_data["detailed_report"] is not None and
                    self._cleaned_data["documents_report"] is not None)
        return False

    def clear_data(self, data_type: str = "all"):
        """
        –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–∞–º—è—Ç—å –æ—Ç –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

        Args:
            data_type (str): –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö - 'detailed', 'documents', 'all'
        """
        if data_type in ["detailed", "all"]:
            self._cleaned_data["detailed_report"] = None
            self._raw_data["detailed_report"] = None
            self._colored_data["detailed_report"] = None

        if data_type in ["documents", "all"]:
            self._cleaned_data["documents_report"] = None
            self._raw_data["documents_report"] = None

        gc.collect()
        print("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")

    def reload_data(self, filepath: str, data_type: str) -> pd.DataFrame:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

        Args:
            filepath (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            data_type (str): –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö - 'detailed' –∏–ª–∏ 'documents'

        Returns:
            pd.DataFrame: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        Raises:
            ValueError: –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        self.clear_data(data_type)

        if data_type == "detailed":
            return self.load_detailed_report(filepath)
        elif data_type == "documents":
            return self.load_documents_report(filepath)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'detailed' –∏–ª–∏ 'documents'")

    def get_colored_data(self, data_type: str) -> Optional[pd.DataFrame]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º —Ü–≤–µ—Ç–∞.

        Args:
            data_type (str): –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö - 'detailed' –∏–ª–∏ 'documents'

        Returns:
            Optional[pd.DataFrame]: DataFrame —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏–ª–∏ None
        """
        if data_type == "detailed":
            return self._colored_data["detailed_report"]
        elif data_type == "documents":
            return self._colored_data["documents_report"]
        return None

    def set_processed_data(self, data_type: str, dataframe: pd.DataFrame):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏.

        Args:
            data_type (str): –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö - "lawsuit_staged", "order_staged",
                           "documents_processed", "tasks"
            dataframe (pd.DataFrame): –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        Raises:
            ValueError: –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        if data_type in self._processed_data:
            self._processed_data[data_type] = dataframe
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {data_type}")
        else:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data_type}")

    def get_processed_data(self, data_type: str) -> Optional[pd.DataFrame]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

        Args:
            data_type (str): –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö - "lawsuit_staged", "order_staged",
                           "documents_processed", "tasks"

        Returns:
            Optional[pd.DataFrame]: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
        """
        return self._processed_data.get(data_type)

    def clear_processed_data(self, data_type: str = "all"):
        """
        –û—á–∏—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏.

        Args:
            data_type (str): –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ "all" –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö
        """
        if data_type == "all":
            for key in self._processed_data:
                self._processed_data[key] = None
            print("üßπ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        elif data_type in self._processed_data:
            self._processed_data[data_type] = None
            print(f"üßπ –û—á–∏—â–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data_type}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
data_manager = DataManager()