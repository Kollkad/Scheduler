# backend/app/task_manager/modules/task_analyzer.py
"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
- –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
- –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ –∑–∞–¥–∞—á
"""

import pandas as pd
from typing import List, Dict, Any
from datetime import datetime

from backend.app.common.config.column_names import COLUMNS, VALUES
from backend.app.common.config.task_mappings import TASK_MAPPINGS


class TaskAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

    –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–∞—Ö.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–¥–∞—á."""
        self.tasks = []
        self._task_counter = 1  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö taskCode

    def _generate_task_code(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–¥–∞—á–∏.

        Returns:
            str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TASK_0000001
        """
        task_code = f"TASK_{self._task_counter:07d}"
        self._task_counter += 1
        return task_code

    def analyze_all_tasks(self) -> List[Dict[str, Any]]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á.

        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ data_manager –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑
        –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

        Raises:
            Exception: –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        all_tasks = []
        from backend.app.common.modules.data_manager import data_manager

        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞–¥–∞—á...")

        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Ä–∞—Å—á–µ—Ç–µ
        self._task_counter = 1

        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        lawsuit_staged = data_manager.get_processed_data("lawsuit_staged")
        if lawsuit_staged is not None:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞...")
            lawsuit_tasks = self._analyze_lawsuit_tasks(lawsuit_staged)
            all_tasks.extend(lawsuit_tasks)
            print(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(lawsuit_tasks)} –∑–∞–¥–∞—á –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á")

        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        order_staged = data_manager.get_processed_data("order_staged")
        if order_staged is not None:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞...")
            order_tasks = self._analyze_order_tasks(order_staged)
            all_tasks.extend(order_tasks)
            print(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(order_tasks)} –∑–∞–¥–∞—á –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á")

        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        documents_processed = data_manager.get_processed_data("documents_processed")
        documents_original = data_manager.get_documents_data()
        if documents_processed is not None:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º...")
            document_tasks = self._analyze_document_tasks(documents_processed, documents_original)
            all_tasks.extend(document_tasks)
            print(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(document_tasks)} –∑–∞–¥–∞—á –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –æ–±—Ä–∞—Ç–Ω–æ –≤ data_manager
        if all_tasks:
            tasks_df = pd.DataFrame(all_tasks)
            data_manager.set_processed_data("tasks", tasks_df)

        print(f"‚úÖ –í—Å–µ–≥–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á")
        self.tasks = all_tasks
        return all_tasks

    def _analyze_lawsuit_tasks(self, staged_df: pd.DataFrame) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –¥–ª—è –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

        Args:
            staged_df (pd.DataFrame): –¢–∞–±–ª–∏—Ü–∞ —Å —ç—Ç–∞–ø–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–∑ build_new_table()

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞

        Raises:
            Exception: –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        lawsuit_tasks = []

        try:
            # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            for _, row in staged_df.iterrows():
                case_stage = row.get("caseStage")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç—Ç–∞–ø–∞ –¥–µ–ª–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–∞—Ö –∑–∞–¥–∞—á
                if case_stage in TASK_MAPPINGS["lawsuit"]:
                    stage_tasks = TASK_MAPPINGS["lawsuit"][case_stage]
                    failed_checks = self._get_failed_checks_for_stage(row, stage_tasks)

                    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                    if failed_checks:
                        task = self._format_lawsuit_task(row, failed_checks, case_stage)
                        lawsuit_tasks.append(task)

            return lawsuit_tasks

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {e}")
            return []

    def _analyze_order_tasks(self, staged_df: pd.DataFrame) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

        Args:
            staged_df (pd.DataFrame): –¢–∞–±–ª–∏—Ü–∞ —Å —ç—Ç–∞–ø–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–∑ build_production_table

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞

        Raises:
            Exception: –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        order_tasks = []

        try:
            # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            for _, row in staged_df.iterrows():
                case_stage = row.get("caseStage")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç—Ç–∞–ø–∞ –¥–µ–ª–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–∞—Ö –∑–∞–¥–∞—á
                if case_stage in TASK_MAPPINGS["order"]:
                    stage_tasks = TASK_MAPPINGS["order"][case_stage]
                    failed_checks = self._get_failed_checks_for_stage(row, stage_tasks)

                    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                    if failed_checks:
                        task = self._format_order_task(row, failed_checks, case_stage)
                        order_tasks.append(task)

            return order_tasks

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {e}")
            return []

    def _analyze_document_tasks(self, processed_documents: pd.DataFrame,
                                original_documents_df: pd.DataFrame) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.

        Args:
            processed_documents (pd.DataFrame): –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ document_terms_v2
            original_documents_df (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º

        Raises:
            Exception: –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        document_tasks = []

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if processed_documents is None or processed_documents.empty:
                return []

            # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            for _, row in processed_documents.iterrows():
                stage_tasks = TASK_MAPPINGS["documents"]["executionDocument"]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
                for task_config in stage_tasks:
                    if self._check_document_task_conditions(row, task_config):
                        task = self._format_document_task(row, task_config, original_documents_df)
                        document_tasks.append(task)

            return document_tasks

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º: {e}")
            return []

    def _format_lawsuit_task(self, row: pd.Series, failed_checks: List[Dict],
                             case_stage: str) -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

        Args:
            row (pd.Series): –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ staged_df
            failed_checks (List[Dict]): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            case_stage (str): –≠—Ç–∞–ø –¥–µ–ª–∞

        Returns:
            Dict: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        """
        task_data = failed_checks[0]["task_config"]
        reason_text = task_data.get("reason_text", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        responsible_executor = row.get("responsibleExecutor", "unknown")
        if pd.isna(responsible_executor) or responsible_executor == "":
            responsible_executor = "unknown"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –¥–µ–ª–∞
        case_code = row.get("caseCode", "unknown")
        if pd.isna(case_code) or case_code == "":
            case_code = "unknown"

        return {
            "taskCode": self._generate_task_code(),
            "taskType": task_data["task_code"],
            "caseCode": case_code,
            "sourceType": "detailed",
            "responsibleExecutor": responsible_executor,
            "caseStage": case_stage,
            "monitoringStatus": row.get("monitoringStatus", "unknown"),
            "isCompleted": False,
            "taskText": task_data["task_text"],
            "reasonText": reason_text,
            "failedChecksCount": len(failed_checks),
            "createdDate": datetime.now().isoformat()
        }

    def _format_order_task(self, row: pd.Series, failed_checks: List[Dict],
                           case_stage: str) -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

        Args:
            row (pd.Series): –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ staged_df
            failed_checks (List[Dict]): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            case_stage (str): –≠—Ç–∞–ø –¥–µ–ª–∞

        Returns:
            Dict: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        """
        task_data = failed_checks[0]["task_config"]
        reason_text = task_data.get("reason_text", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        responsible_executor = row.get("responsibleExecutor", "unknown")
        if pd.isna(responsible_executor) or responsible_executor == "":
            responsible_executor = "unknown"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –¥–µ–ª–∞
        case_code = row.get("caseCode", "unknown")
        if pd.isna(case_code) or case_code == "":
            case_code = "unknown"

        return {
            "taskCode": self._generate_task_code(),
            "taskType": task_data["task_code"],
            "caseCode": case_code,
            "sourceType": "detailed",
            "responsibleExecutor": responsible_executor,
            "caseStage": case_stage,
            "monitoringStatus": row.get("monitoringStatus", "unknown"),
            "isCompleted": False,
            "taskText": task_data["task_text"],
            "reasonText": reason_text,
            "failedChecksCount": len(failed_checks),
            "createdDate": datetime.now().isoformat()
        }

    def _format_document_task(self, row: pd.Series, task_config: Dict,
                              original_documents_df: pd.DataFrame) -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.

        Args:
            row (pd.Series): –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ processed_documents
            task_config (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ TASK_MAPPINGS
            original_documents_df (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RESPONSIBLE_EXECUTOR

        Returns:
            Dict: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –¥–µ–ª–∞
        case_code = row.get("caseCode", "unknown")
        if pd.isna(case_code) or case_code == "":
            case_code = "unknown"

        # –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        responsible_executor = "unknown"
        if case_code != "unknown" and original_documents_df is not None:
            matching_rows = original_documents_df[original_documents_df[COLUMNS["DOCUMENT_CASE_CODE"]] == case_code]
            if not matching_rows.empty:
                responsible_executor = matching_rows[COLUMNS["RESPONSIBLE_EXECUTOR"]].iloc[0]
                if pd.isna(responsible_executor) or responsible_executor == "":
                    responsible_executor = "unknown"

        reason_text = task_config.get("reason_text", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        return {
            "taskCode": self._generate_task_code(),
            "taskType": task_config["task_code"],
            "caseCode": case_code,
            "sourceType": "documents",
            "responsibleExecutor": responsible_executor,
            "caseStage": "executionDocumentReceived",
            "monitoringStatus": row.get("monitoringStatus", "unknown"),
            "isCompleted": False,
            "taskText": task_config["task_text"],
            "reasonText": reason_text,
            "failedChecksCount": 1,
            "createdDate": datetime.now().isoformat()
        }

    def _check_document_task_conditions(self, row: pd.Series, task_config: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

        Args:
            row (pd.Series): –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
            task_config (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ TASK_MAPPINGS

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–Ω–∞—á–µ False
        """
        try:
            monitoring_status = row.get("monitoringStatus", "")
            response_essence = row.get("responseEssence", "")

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
            is_completed = (response_essence == "–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            completion_status = "false" if not is_completed else "true"

            conditions = task_config["conditions"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            completion_ok = (completion_status == conditions[0])
            monitoring_ok = (monitoring_status.lower() == conditions[1])

            return completion_ok and monitoring_ok

        except Exception as e:
            return False

    def _get_failed_checks_for_stage(self, row: pd.Series, stage_tasks: List[Dict]) -> List[Dict]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç—Ç–∞–ø–∞ –¥–µ–ª–∞.

        Args:
            row (pd.Series): –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å monitoring_status –∏ completion_status
            stage_tasks (List): –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–∞–ø–∞

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
        """
        failed_checks = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–∞–ø–µ
        for task_config in stage_tasks:
            is_failed = False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            if "special_conditions" in task_config:
                if self._check_special_conditions(row, task_config["special_conditions"]):
                    is_failed = True
            elif "conditions" in task_config:
                if self._check_task_conditions(row, task_config):
                    is_failed = True

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if is_failed:
                failed_checks.append({
                    "task_config": task_config
                })

        return failed_checks

    def _check_special_conditions(self, row: pd.Series, special_conditions: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.

        Args:
            row (pd.Series): –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            special_conditions (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π

        Returns:
            bool: True –µ—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–Ω–∞—á–µ False
        """
        try:
            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            return False
        except Exception:
            return False

    def _check_task_conditions(self, row: pd.Series, task_config: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å–∫–æ–≤–æ–≥–æ/–ø—Ä–∏–∫–∞–∑–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

        Args:
            row (pd.Series): –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            task_config (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ TASK_MAPPINGS

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–Ω–∞—á–µ False
        """
        try:
            monitoring_status = row.get("monitoringStatus", "")
            completion_status = row.get("completionStatus", "")

            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
            monitoring_parts = monitoring_status.split(";")
            completion_parts = completion_status.split(";")

            index = task_config["index"]
            conditions = task_config["conditions"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if (index < len(completion_parts) and
                    index < len(monitoring_parts)):
                completion_ok = (completion_parts[index].lower() == conditions[0])
                monitoring_ok = (monitoring_parts[index].lower() == conditions[1])

                return completion_ok and monitoring_ok

            return False

        except Exception:
            return False


# –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
task_analyzer = TaskAnalyzer()