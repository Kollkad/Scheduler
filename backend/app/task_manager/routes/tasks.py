# backend/app/task_manager/routes/tasks.py
"""
–ú–∞—Ä—à—Ä—É—Ç—ã FastAPI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API endpoints –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤.
"""

from fastapi import APIRouter, HTTPException, Query
from typing import Optional, List, Dict, Any
import pandas as pd

from backend.app.common.modules.data_manager import data_manager
from backend.app.task_manager.modules.task_analyzer import task_analyzer

router = APIRouter(prefix="/api/tasks", tags=["tasks"])


@router.get("/calculate")
async def calculate_tasks(executor: Optional[str] = Query(None,
                                                          description="–§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")):
    """
    –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    —Ç–∏–ø–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.

    Args:
        executor (str, optional): –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

    Raises:
        HTTPException: –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö —Ä–∞—Å—á–µ—Ç–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        if not data_manager.is_loaded("both"):
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ –æ—Ç—á–µ—Ç–∞ (–¥–µ—Ç–∞–ª—å–Ω—ã–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"
            )

        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞–¥–∞—á...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        existing_tasks = data_manager.get_processed_data("tasks")
        if existing_tasks is not None and not existing_tasks.empty:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
            all_tasks = existing_tasks.to_dict('records')
        else:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            all_tasks = task_analyzer.analyze_all_tasks()
            print(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {len(all_tasks)}")

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        if executor:
            filtered_tasks = [task for task in all_tasks if task.get("responsibleExecutor") == executor]
            print(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á –¥–ª—è {executor}: {len(filtered_tasks)} –∏–∑ {len(all_tasks)}")
        else:
            filtered_tasks = all_tasks

        return {
            "success": True,
            "totalTasks": len(all_tasks),
            "filteredTasks": len(filtered_tasks),
            "executor": executor,
            "data": filtered_tasks,
            "message": f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(filtered_tasks)} –∑–∞–¥–∞—á" + (f" –¥–ª—è {executor}" if executor else "")
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á: {str(e)}")


@router.get("/list")
async def get_tasks_list(
        responsibleExecutor: Optional[str] = Query(None,
                                                   description="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.

    Args:
        responsibleExecutor (str, optional): –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é

    Returns:
        dict: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏

    Raises:
        HTTPException: –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        tasks_df = data_manager.get_processed_data("tasks")

        if tasks_df is None or tasks_df.empty:
            return {
                "success": True,
                "tasks": [],
                "totalTasks": 0,
                "filteredCount": 0,
                "message": "–ù–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /calculate —Å–Ω–∞—á–∞–ª–∞."
            }

        all_tasks = tasks_df.to_dict('records')
        filtered_tasks = all_tasks

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        if responsibleExecutor:
            filtered_tasks = [task for task in filtered_tasks if
                              str(task.get("responsibleExecutor", "")).strip() == responsibleExecutor]

        return {
            "success": True,
            "totalTasks": len(all_tasks),
            "filteredCount": len(filtered_tasks),
            "tasks": filtered_tasks,
            "message": f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_tasks)} –∑–∞–¥–∞—á" +
                       (f" –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {responsibleExecutor}" if responsibleExecutor else "")
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {str(e)}")


@router.get("/save-all")
async def save_all_tasks():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Excel —Ñ–∞–π–ª.

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ

    Raises:
        HTTPException: –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        tasks_df = data_manager.get_processed_data("tasks")

        if tasks_df is None or tasks_df.empty:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /calculate —Å–Ω–∞—á–∞–ª–∞."
            )

        from datetime import datetime
        import os

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        os.makedirs("backend/app/data", exist_ok=True)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"tasks_export_{timestamp}.xlsx"
        filepath = os.path.join("backend/app/data", filename)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ Excel —Ñ–∞–π–ª
        tasks_df.to_excel(filepath, index=False)

        return {
            "success": True,
            "filename": filename,
            "filepath": filepath,
            "taskCount": len(tasks_df),
            "message": f"–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}"
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/status")
async def get_tasks_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á.

    Returns:
        dict: –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á

    Raises:
        HTTPException: –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    """
    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        status = {
            "reportsLoaded": data_manager.is_loaded("both"),
            "processedData": {
                "lawsuitStaged": data_manager.get_processed_data("lawsuit_staged") is not None,
                "orderStaged": data_manager.get_processed_data("order_staged") is not None,
                "documentsProcessed": data_manager.get_processed_data("documents_processed") is not None,
                "tasks": data_manager.get_processed_data("tasks") is not None
            },
            "taskCount": 0
        }

        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
        tasks_df = data_manager.get_processed_data("tasks")
        if tasks_df is not None:
            status["taskCount"] = len(tasks_df)

        return {
            "success": True,
            "status": status,
            "message": "–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω"
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


@router.get("/{task_code}")
async def get_task_details(task_code: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–µ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É taskCode.

    Args:
        task_code (str): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: TASK_000001)

    Returns:
        dict: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ

    Raises:
        HTTPException: –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏
    """
    try:
        tasks_df = data_manager.get_processed_data("tasks")

        if tasks_df is None or tasks_df.empty:
            raise HTTPException(
                status_code=404,
                detail="–ù–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /calculate —Å–Ω–∞—á–∞–ª–∞."
            )

        # –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
        task_match = tasks_df[tasks_df["taskCode"] == task_code]

        if task_match.empty:
            return {
                "success": True,
                "task": None,
                "message": f"–ó–∞–¥–∞—á–∞ '{task_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π
        task_data = task_match.iloc[0].to_dict()
        task_data = {k: ("" if pd.isna(v) else v) for k, v in task_data.items()}

        return {
            "success": True,
            "task": task_data,
            "message": "–ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞"
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏: {str(e)}"
        )