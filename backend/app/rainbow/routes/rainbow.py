# backend/app/rainbow/routes/rainbow.py
"""
–ú–æ–¥—É–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤ FastAPI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ä–∞–¥—É–≥–∞).

–°–æ–¥–µ—Ä–∂–∏—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ–ª –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –º–æ–¥—É–ª–µ–º RainbowClassifier –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–µ–ª–∞–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

–û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
- /analyze: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- /cases-by-color: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ–ª –ø–æ —Ü–≤–µ—Ç–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
- /quick-test: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

from fastapi import APIRouter, HTTPException, Query
import pandas as pd
from typing import Dict, List

router = APIRouter(prefix="/api/rainbow", tags=["rainbow"])

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    from backend.app.common.modules.data_manager import data_manager
    from backend.app.rainbow.modules.rainbow_classifier import RainbowClassifier
    from backend.app.common.routes.common import current_files
    from backend.app.common.config.column_names import COLUMNS
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ rainbow –º–æ–¥—É–ª–µ–π: {e}")

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
    def load_excel_data(*args):
        """–ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        return pd.DataFrame()


    def clean_data(*args):
        """–ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        return pd.DataFrame()


    class RainbowClassifier:
        """–ó–∞–≥–ª—É—à–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ä–∞–¥—É–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

        @staticmethod
        def classify_cases(*args):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
            return [743, 23, 0, 211, 0, 0, 3989, 6702, 7373]


    def clear_memory(*args):
        """–ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏."""
        pass

# –ú–∞–ø–ø–∏–Ω–≥ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∫–æ–¥–æ–≤ –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
COLOR_MAPPING = {
    "ik": "–ò–ö",
    "gray": "–°–µ—Ä—ã–π",
    "green": "–ó–µ–ª–µ–Ω—ã–π",
    "yellow": "–ñ–µ–ª—Ç—ã–π",
    "orange": "–û—Ä–∞–Ω–∂–µ–≤—ã–π",
    "blue": "–°–∏–Ω–∏–π",
    "red": "–ö—Ä–∞—Å–Ω—ã–π",
    "purple": "–õ–∏–ª–æ–≤—ã–π",
    "white": "–ë–µ–ª—ã–π"
}

@router.get("/analyze")
async def analyze_rainbow():
    """
    –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã (—Ä–∞–¥—É–≥–∏).

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–µ–ª
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª—è RainbowClassifier.

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π: {
            "success": bool,
            "data": List[int],  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–ª –ø–æ —Ü–≤–µ—Ç–∞–º
            "totalCases": int,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª
            "message": str      # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        }

    Raises:
        HTTPException: 404 –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    if not current_files["current_detailed_report"]:
        raise HTTPException(status_code=404, detail="–¢–µ–∫—É—â–∏–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

    try:
        print("\nüåà –ê–ù–ê–õ–ò–ó –†–ê–î–£–ì–ò")
        print("=" * 30)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        detailed_df = data_manager.load_detailed_report(current_files["current_detailed_report"])
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(detailed_df)}")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ–ª
        chart_data = RainbowClassifier.classify_cases(detailed_df)
        print("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ rainbow –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        if hasattr(RainbowClassifier, 'print_rainbow_stats'):
            RainbowClassifier.print_rainbow_stats(chart_data)

        return {
            "success": True,
            "data": chart_data,
            "totalCases": sum(chart_data),
            "message": "–ê–Ω–∞–ª–∏–∑ —Ä–∞–¥—É–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        }

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê –†–ê–î–£–ì–ò: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


@router.get("/cases-by-color")
async def get_cases_by_color(
        color: str = Query(
            ...,
            description="–¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ò–ö, –°–µ—Ä—ã–π, –ó–µ–ª–µ–Ω—ã–π, –ñ–µ–ª—Ç—ã–π, –û—Ä–∞–Ω–∂–µ–≤—ã–π, –ö—Ä–∞—Å–Ω—ã–π, –õ–∏–ª–æ–≤—ã–π, –°–∏–Ω–∏–π, –ë–µ–ª—ã–π)"
        )
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–µ–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤, —Ç–∞–∫ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–æ–¥—ã.
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–µ–ª–∞ –ø–æ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

    Args:
        color (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∫–æ–¥–µ

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–µ–ª: {
            "success": bool,
            "color": str,           # –ò—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–≤–µ—Ç–∞
            "russianColor": str,    # –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
            "count": int,           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–µ–ª
            "cases": List[Dict],    # –î–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ª
            "message": str          # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        }

    Raises:
        HTTPException: 404 –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        HTTPException: 400 –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ —Ü–≤–µ—Ç–∞
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    if not current_files["current_detailed_report"]:
        raise HTTPException(status_code=404, detail="–¢–µ–∫—É—â–∏–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        detailed_df = data_manager.get_colored_data("detailed")
        if detailed_df is None:
            raise HTTPException(status_code=404, detail="–î–∞–Ω–Ω—ã–µ —Å —Ü–≤–µ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
        russian_color = color

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–æ–¥–∞ –≤ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if color in COLOR_MAPPING:
            russian_color = COLOR_MAPPING[color]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞
        valid_russian_colors = list(COLOR_MAPPING.values())
        if russian_color not in valid_russian_colors and russian_color != "–ò–ö":
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(valid_russian_colors + ['–ò–ö'])}"
            )

        print(f"üîç –ü–æ–∏—Å–∫ –¥–µ–ª —Å —Ü–≤–µ—Ç–æ–º: '{russian_color}' (–∏—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: '{color}')")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        color_column_name = '–¶–≤–µ—Ç (—Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥)'
        if color_column_name not in detailed_df.columns:
            raise HTTPException(status_code=500, detail="–°—Ç–æ–ª–±–µ—Ü —Å —Ü–≤–µ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ü–≤–µ—Ç—É
        filtered_df = detailed_df[detailed_df[color_column_name] == russian_color]

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} –¥–µ–ª —Å —Ü–≤–µ—Ç–æ–º '{russian_color}'")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–µ–ª
        cases_data = []
        for _, row in filtered_df.iterrows():

            def extract_value(value):
                """
                –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.

                Args:
                    value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è

                Returns:
                    str: –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                """
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ pandas —Å—Ç—Ä—É–∫—Ç—É—Ä
                if isinstance(value, (pd.Series, pd.DataFrame)):
                    if len(value) > 0:
                        first_val = value.iloc[0] if hasattr(value, 'iloc') else value.values[0]
                        return str(first_val) if pd.notna(first_val) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    else:
                        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    return str(value) if pd.notna(value) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–µ–ª–∞
            case_data = {
                "caseCode": extract_value(row.get(COLUMNS.get("CASE_CODE", "–ö–æ–¥ –¥–µ–ª–∞"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
                "responsibleExecutor": extract_value(
                    row.get(COLUMNS.get("RESPONSIBLE_EXECUTOR", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
                "gosb": extract_value(row.get(COLUMNS.get("GOSB", "–ì–û–°–ë"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
                "currentPeriodColor": extract_value(row.get(color_column_name, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
                "courtProtectionMethod": extract_value(
                    row.get(COLUMNS.get("METHOD_OF_PROTECTION", "–°–ø–æ—Å–æ–± —Å—É–¥–µ–±–Ω–æ–π –∑–∞—â–∏—Ç—ã"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
                "courtReviewingCase": extract_value(
                    row.get(COLUMNS.get("COURT", "–°—É–¥, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏–π –¥–µ–ª–æ"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
                "caseStatus": extract_value(row.get(COLUMNS.get("CASE_STATUS", "–°—Ç–∞—Ç—É—Å –¥–µ–ª–∞"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
                "previousPeriodColor": "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            }
            cases_data.append(case_data)

        return {
            "success": True,
            "color": color,
            "russianColor": russian_color,
            "count": len(cases_data),
            "cases": cases_data,
            "message": f"–ù–∞–π–¥–µ–Ω–æ {len(cases_data)} –¥–µ–ª —Å —Ü–≤–µ—Ç–æ–º '{russian_color}'"
        }

    except HTTPException:
        # –ü–µ—Ä–µ–≤—ã–±—Ä–æ—Å HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        raise
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ª –ø–æ —Ü–≤–µ—Ç—É '{color}': {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ª: {str(e)}")


@router.get("/quick-test")
async def quick_test_analysis():
    """
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        Dict: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {
            "success": bool,
            "data": List[int],  # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–ª –ø–æ —Ü–≤–µ—Ç–∞–º
            "totalCases": int,  # –û–±—â–µ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            "message": str      # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
    """
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    test_values = [743, 23, 0, 211, 0, 4204, 7131, 0, 6729]

    return {
        "success": True,
        "data": test_values,
        "totalCases": sum(test_values),
        "message": "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    }