# backend/app/table_sorter/routes/filters.py
"""
–ú–æ–¥—É–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤ FastAPI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è:
- –ü–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
- –ü–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

from typing import Dict, Any, List
import pandas as pd
from fastapi import APIRouter, HTTPException, Body, Query
from backend.app.table_sorter.modules.filter_manager import filter_settings

router = APIRouter(tags=["filters"])

@router.get("/api/filter-options")
async def get_filter_options(columns: List[str] = Query(None)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π.
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /api/filter-options?columns=gosb&columns=responsibleExecutor

    Args:
        columns (List[str]): –°–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–ø—Ü–∏—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {
            "success": bool,
            "data": dict,      # –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            "message": str     # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        }

    Raises:
        HTTPException: 500 –ø—Ä–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–∫–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        options = filter_settings.get_filter_options(columns)
        return {
            "success": True,
            "data": options,
            "message": "Filter options retrieved successfully"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/api/filters/metadata")
async def get_filters_metadata():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö.

    Provides frontend with information about available filters, their types
    and corresponding database columns for dynamic interface generation.

    Returns:
        dict: –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ {
            "success": bool,
            "data": {
                "filters": list,      # –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                "totalFilters": int   # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            }
        }

    Raises:
        HTTPException: 500 –ø—Ä–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    try:
        filters_meta = filter_settings.get_available_filters()
        return {
            "success": True,
            "data": {
                "filters": filters_meta,
                "totalFilters": len(filters_meta)
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/filter/apply")
async def apply_filters(filters: Dict[str, Any] = Body(...)):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º –¥–∞–Ω–Ω—ã—Ö.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.

    Args:
        filters (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {field_name: filter_value}

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {
            "success": bool,
            "data": list,           # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            "total": int,           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            "filtersApplied": dict  # –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        }

    Raises:
        HTTPException: 500 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    try:
        from backend.app.common.modules.data_manager import data_manager

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        df = data_manager.get_colored_data("detailed")
        if df is None or df.empty:
            return {
                "success": False,
                "data": [],
                "total": 0,
                "message": "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        color_column_name = '–¶–≤–µ—Ç (—Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥)'
        if color_column_name not in df.columns:
            raise HTTPException(status_code=500, detail="–°—Ç–æ–ª–±–µ—Ü —Å —Ü–≤–µ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")

        # –ú–∞–ø–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
        column_mapping = {
            "gosb": "–ì–û–°–ë",
            "courtProtectionMethod": "–°–ø–æ—Å–æ–± —Å—É–¥–µ–±–Ω–æ–π –∑–∞—â–∏—Ç—ã",
            "responsibleExecutor": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
            "currentPeriodColor": color_column_name,
            "courtReviewingCase": "–°—É–¥, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏–π –¥–µ–ª–æ"
        }

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º
        filtered_df = df.copy()
        for frontend_field, filter_value in filters.items():
            if filter_value and frontend_field in column_mapping:
                db_column = column_mapping[frontend_field]
                if db_column in filtered_df.columns:
                    print(f"üîç –§–∏–ª—å—Ç—Ä—É–µ–º {db_column} –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é: {filter_value}")
                    filtered_df = filtered_df[filtered_df[db_column] == filter_value]

        print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_df)} –∑–∞–ø–∏—Å–µ–π")

        # –û—á–∏—Å—Ç–∫–∞ DataFrame –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        if filtered_df.columns.duplicated().any():
            filtered_df = filtered_df.loc[:, ~filtered_df.columns.duplicated()]

        def safe_convert(value):
            """
            –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã.

            Args:
                value: –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

            Returns:
                –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None
            """
            if pd.isna(value):
                return None
            elif isinstance(value, (int, float)):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if value == float('inf') or value == float('-inf'):
                    return None
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                    if value == int(value):
                        return int(value)
                    return float(value)
                except (ValueError, OverflowError):
                    return str(value)
            else:
                return str(value)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        result = []
        for _, row in filtered_df.iterrows():
            row_dict = {}
            for col in filtered_df.columns:
                try:
                    row_dict[col] = safe_convert(row[col])
                except Exception as e:
                    row_dict[col] = None
            result.append(row_dict)

        return {
            "success": True,
            "data": result,
            "total": len(result),
            "filtersApplied": filters
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")