// NotificationModal.tsx
import { useState, useEffect, useRef } from "react";
import { X, Copy } from "lucide-react";

interface NotificationModalProps {
  isOpen: boolean;
  onClose: () => void;
  caseCode: string;
  employeeName: string;
  caseStatus: string;
  observationStatus: string;
}

export function NotificationModal({
  isOpen,
  onClose,
  caseCode,
  employeeName,
  caseStatus,
  observationStatus
}: NotificationModalProps) {
  const [showCopySuccess, setShowCopySuccess] = useState(false);
  const modalRef = useRef<HTMLDivElement>(null);

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
  const getObservationCriteria = (status: string) => {
    switch (status.toLowerCase()) {
      case '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ':
        return '–ü—Ä–µ–≤—ã—à–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –¥–µ–ª–∞';
      case '–≤ —Å—Ä–æ–∫':
        return '–î–µ–ª–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–∫–∞—Ö';
      default:
        return '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  const getRecommendedAction = (status: string) => {
    switch (status.toLowerCase()) {
      case '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ':
        return '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã –ø–æ —É—Å–∫–æ—Ä–µ–Ω–∏—é —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –¥–µ–ª–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.';
      case '–≤ —Å—Ä–æ–∫':
        return '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ö–æ–¥ –¥–µ–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É.';
      default:
        return '–ü—Ä–æ—Å—å–±–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –¥–µ–ª–∞.';
    }
  };

  // –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  const messageText = `–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) ${employeeName},
–¥–µ–ª–æ ${caseCode} (${caseStatus}) —Ç—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.

–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
üîπ ${observationStatus}
üîπ –ü—Ä–∏—á–∏–Ω–∞: ${getObservationCriteria(observationStatus)}

${getRecommendedAction(observationStatus)}`;

  // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  const handleCopy = async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Clipboard API
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(messageText);
        setShowCopySuccess(true);
        setTimeout(() => setShowCopySuccess(false), 5000);
        return;
      }

      // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–µ–¥, –≥–¥–µ Clipboard API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
      const textArea = document.createElement('textarea');
      textArea.value = messageText;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      const successful = document.execCommand('copy');
      document.body.removeChild(textArea);

      if (successful) {
        setShowCopySuccess(true);
        setTimeout(() => setShowCopySuccess(false), 5000);
      } else {
        throw new Error('Copy command failed');
      }
    } catch (err) {
      console.error('Failed to copy text: ', err);
      setShowCopySuccess(true);
      setTimeout(() => setShowCopySuccess(false), 5000);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen, onClose]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div 
        ref={modalRef}
        className="bg-white rounded-2xl p-6 max-w-2xl w-full relative"
        style={{
          border: '1px solid #BDBDCC',
          boxShadow: '2px 4px 8px rgba(0, 0, 0, 0.1), -2px 0 8px rgba(0, 0, 0, 0.05)'
        }}
      >
        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 p-1 hover:bg-gray-100 rounded-full transition-colors"
        >
          <X className="h-5 w-5" style={{ color: '#1F1F1F' }} />
        </button>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h2 className="text-xl font-semibold text-gray-900 mb-6 pr-8">
          –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        </h2>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        <div className="bg-gray-50 rounded-lg p-6 mb-6">
          <pre className="whitespace-pre-wrap text-sm text-gray-900 font-sans leading-relaxed">
            {messageText}
          </pre>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="flex justify-end">
          <button
            onClick={handleCopy}
            className="inline-flex items-center px-6 py-2 text-sm font-medium text-white rounded-full transition-colors"
            style={{ backgroundColor: '#1CC53C' }}
          >
            <Copy className="h-4 w-4 mr-2" />
            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
          </button>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ */}
        {showCopySuccess && (
          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2">
            <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-2 rounded-lg text-sm">
              –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!
            </div>
          </div>
        )}
      </div>
    </div>
  );
}