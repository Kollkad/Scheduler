// frontend/client/pages/TaskDetail.tsx
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { ArrowLeft, Loader, CheckCircle, XCircle, AlertCircle } from "lucide-react";
import { PageContainer } from "@/components/PageContainer";
import { apiClient } from "@/services/api/client";
import { API_ENDPOINTS } from "@/services/api/endpoints";

type TaskDetails = {
    taskCode: string;
    taskType: string;
    caseCode: string;
    responsibleExecutor: string;
    caseStage: string;
    taskText: string;
    reasonText?: string;
    monitoringStatus: string;
    isCompleted: boolean;
    failedChecksCount: number;
    sourceType: string;
    createdDate: string;
};

export default function TaskDetail() {
    const navigate = useNavigate();
    const { taskCode } = useParams<{ taskCode: string }>();
    const [taskData, setTaskData] = useState<TaskDetails | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ taskCode
    useEffect(() => {
        if (taskCode) {
            loadTaskData(taskCode);
        }
    }, [taskCode]);

    const loadTaskData = async (code: string) => {
        try {
            setLoading(true);
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏:', code);
            
            const response = await apiClient.get<{ 
                success: boolean; 
                task: TaskDetails; 
                message?: string 
            }>(`${API_ENDPOINTS.TASK_DETAILS}/${code}`);
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã:', response);
            
            if (response && response.success && response.task) {
                setTaskData(response.task);
            } else {
                throw new Error(response?.message || '–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
            setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏');
            setTaskData(null);
        } finally {
            setLoading(false);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∑–∞–¥–∞—á–∏
    const handleGoToSource = () => {
        if (!taskData) return;
        
        if (taskData.sourceType === "documents") {
            console.log('‚ö†Ô∏è TODO: –ù—É–∂–Ω–æ document_type –∏ department –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞');
            navigate(`/case/${taskData.caseCode}`);
        } else {
            navigate(`/case/${taskData.caseCode}`);
        }
    };

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (loading) {
        return (
            <PageContainer>
                <div className="flex items-center justify-center h-64">
                    <Loader className="h-8 w-8 animate-spin text-blue-500" />
                    <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏...</span>
                </div>
            </PageContainer>
        );
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (error || !taskData) {
        return (
            <PageContainer>
                <div className="text-center py-8">
                    <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
                    <h2 className="text-xl font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
                    <p className="text-gray-600 mb-4">{error || '–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}</p>
                    <button
                        onClick={() => navigate(-1)}
                        className="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-full hover:bg-gray-50"
                    >
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
                    </button>
                </div>
            </PageContainer>
        );
    }

    return (
        <PageContainer>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
            <div className="flex items-center justify-between mb-6">
                <button
                    onClick={() => navigate(-1)}
                    className="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-full hover:bg-gray-50 transition-colors"
                >
                    <ArrowLeft className="h-4 w-4 mr-2" />
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
                </button>
                
                <div className="flex items-center gap-3">
                    {/* –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
                    <div className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium ${
                        taskData.isCompleted ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                        {taskData.isCompleted ? (
                            <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
                        ) : (
                            <XCircle className="h-5 w-5 text-red-500 mr-2" />
                        )}
                        <span>{taskData.isCompleted ? "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" : "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}</span>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É */}
                    <button
                        onClick={handleGoToSource}
                        className="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-full hover:bg-gray-50 transition-colors"
                    >
                        {taskData.sourceType === "documents" ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É" : "–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–µ–ª—É"}
                    </button>
                </div>
            </div>

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ */}
            <div className="mb-8">
                <h1 className="text-2xl font-bold text-gray-900">
                    –ó–∞–¥–∞—á–∞: {taskData.taskCode}
                </h1>
                <p className="text-gray-600 mt-1">{taskData.taskText}</p>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ */}
            <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <div className="space-y-4">
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">–ö–æ–¥ –¥–µ–ª–∞</h3>
                            <p className="mt-1 text-sm text-gray-900">{taskData.caseCode}</p>
                        </div>
                        
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">–¢–∏–ø –∑–∞–¥–∞—á–∏</h3>
                            <p className="mt-1 text-sm text-gray-900">{taskData.taskType}</p>
                        </div>
                        
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">–≠—Ç–∞–ø –¥–µ–ª–∞</h3>
                            <p className="mt-1 text-sm text-gray-900">{taskData.caseStage}</p>
                        </div>
                        
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö</h3>
                            <p className="mt-1 text-sm text-gray-900 capitalize">{taskData.sourceType}</p>
                        </div>
                    </div>

                    {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å—Ç–∞—Ç—É—Å—ã –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å */}
                    <div className="space-y-4">
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</h3>
                            <p className="mt-1 text-sm text-gray-900">{taskData.responsibleExecutor}</p>
                        </div>
                        
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h3>
                            <p className="mt-1 text-sm text-gray-900">{taskData.monitoringStatus}</p>
                        </div>
                        
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫</h3>
                            <p className="mt-1 text-sm text-gray-900">{taskData.failedChecksCount || 0}</p>
                        </div>
                        
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</h3>
                            <p className="mt-1 text-sm text-gray-900">
                                {new Date(taskData.createdDate).toLocaleDateString('ru-RU')}
                            </p>
                        </div>
                    </div>
                </div>

                {/* –ü—Ä–∏—á–∏–Ω—ã –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ */}
                <div className="pt-6 border-t border-gray-200">
                    <h3 className="text-sm font-medium text-gray-500 mb-2">–ü—Ä–∏—á–∏–Ω—ã –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏</h3>
                    <p className="text-sm text-gray-700">
                        {taskData.reasonText || "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
                    </p>
                </div>
            </div>
        </PageContainer>
    );
}